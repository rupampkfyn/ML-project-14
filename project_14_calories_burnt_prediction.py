# -*- coding: utf-8 -*-
"""Project 14. Calories Burnt Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LlXd9lC5oVxRNtO7T1-tNCBrrSgeaDie

Importing the Dependencies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn import metrics

"""Data Collection and Processing"""

# loading the CSV data in a Pandas DataFrame
cal_data = pd.read_csv('/content/calories.csv')

# printing the first five rows of the dataframe
cal_data.head()

exercise_data = pd.read_csv('/content/exercise.csv')

exercise_data.head()

"""Combining the two DataFrames"""

calories_data = pd.concat([exercise_data,cal_data['Calories']], axis=1)

calories_data.head()

# checking the number of rows and columns
calories_data.shape

# getting some information about the data
calories_data.info()

# checking for missing values
calories_data.isnull().sum()

"""Data Analysis"""

# getting statistical measures about the data
calories_data.describe()

"""Data Visualization"""

sns.set()

# plotting the "Gender" column in count plot
sns.countplot(data=calories_data, x='Gender', palette='muted')

# finding the distribution of "Age" column
 sns.histplot(calories_data['Age'], kde=True)

# finding the distribution of "Height" column
 sns.histplot(calories_data['Height'], kde=True)

# finding the distribution of "Weight" column
 sns.histplot(calories_data['Weight'], kde=True)

"""Finding the Correlation in the dataset

1. Positive Correlation
2. Negative Correlatiob
"""

# Selecting only numerical columns
numerical_columns = calories_data.select_dtypes(include=[np.number])

# Calculating correlation
correlation = numerical_columns.corr()

# constructing a heatmap to understand the correlation

plt.figure(figsize=(8,8))
sns.heatmap(correlation, cbar=True, square=True, fmt='.1f', annot=True, annot_kws={'size':8}, cmap='Blues')

"""Converting the text data to numerical values"""

calories_data.replace({'Gender':{'male':0,'female':1}}, inplace=True)

calories_data.head()

"""Seperating features and Target"""

X = calories_data.drop(columns=['User_ID','Calories'], axis=1)
Y = calories_data['Calories']

print(X)

print(Y)

"""Splitting the data into Training data and Test data"""

X_train,X_test,Y_train,Y_test = train_test_split(X,Y, test_size=0.2, random_state=2)

print(X.shape,X_train.shape,X_test.shape)

"""Model Training

XGBoost Regressor
"""

# loading the model
model=XGBRegressor()

# training the model with X_train
model.fit(X_train,Y_train)

"""Model Evaluation

Prediction on Training Data
"""

training_data_prediction = model.predict(X_train)

"""Mean Absolute Error"""

mae = metrics.mean_absolute_error(Y_train, training_data_prediction)

print("Mean Absolute Error for Training Data =",mae)

"""Prediction on Test data"""

test_data_prediction = model.predict(X_test)

mae1 = metrics.mean_absolute_error(Y_test, test_data_prediction)

print("Mean Absolute Error for Test Data =",mae1)

"""Building a predictive system"""

input_data = (2,36,177.0,76.0,1.0,74.0,37.8)

# changing the input_data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print("The calories burnt after exercise is", prediction[0])

